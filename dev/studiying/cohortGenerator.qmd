---
title: "CohortGenerator"
format:
  html: 
    page-layout: full
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
devtools::load_all(".")
tmp_folder <- here::here("dev", "studiying")
```

```{r}
path_databases_settings_yalm <- testthat::test_path("databases_settings", "databases_settings.yml")
databases_settings_tibble <- readDatabasesSettings(path_databases_settings_yalm)

databases_settings_tibble
```

```{r}
database_settings <- databases_settings_tibble |> 
  dplyr::filter(database_name == "test_bq") |> 
  dplyr::pull(database_settings) |> 
  unlist(recursive = FALSE)
```

```{r}
# A list of cohort IDs for use in this vignette
cohortIds <- c(19,23)
# Get the SQL/JSON for the cohorts
cohortDefinitionSet <- ROhdsiWebApi::exportCohortDefinitionSet(
  baseUrl = database_settings$webApi$url,
  cohortIds = cohortIds, 
  generateStats = T # TRUE will populate stats tables in CohortGenerator::generateCohortSet
)

cohortDefinitionSet
```

```{r}
# First get the cohort table names to use for this generation task
cohortTableNames <- CohortGenerator::getCohortTableNames(cohortTable = "cg_example")

# Next create the tables on the database
CohortGenerator::createCohortTables(
  connectionDetails = database_settings$connectionDetails,
  cohortTableNames = cohortTableNames,
  cohortDatabaseSchema = database_settings$schemas$scratch)

# Generate the cohort set
cohortsGenerated <- CohortGenerator::generateCohortSet(
  connectionDetails= database_settings$connectionDetails,
  cdmDatabaseSchema = database_settings$schemas$CDM,
  cohortDatabaseSchema = database_settings$schemas$scratch,
  cohortTableNames = cohortTableNames,
  cohortDefinitionSet = cohortDefinitionSet, 
  tempEmulationSchema = database_settings$schemas$scratch, 
  incremental = TRUE, 
  incrementalFolder = tmp_folder)
```

```{r}
count <- CohortGenerator::getCohortCounts(
  connectionDetails = database_settings$connectionDetails,
  cohortDatabaseSchema = database_settings$schemas$scratch,
  cohortTable = cohortTableNames$cohortTable)
```

# add ID cohorts

```{r}

new_table <- tibble::tibble(
  subject_id = 1:100, 
  cohort_start_date = lubridate::dmy("01-01-2000"),  
  cohort_end_date = lubridate::dmy("01-01-2020")
)


conn <- DatabaseConnector::connect(database_settings$connectionDetails)
DatabaseConnector::dbWriteTable(
  conn = conn, 
  name = paste0(database_settings$schemas$scratch, ".tmp_import_table"),
  value = new_table, 
  tempEmulationSchema = database_settings$schemas$scratch, 
  temporary = F, 
  overwrite = T
)
DatabaseConnector::disconnect(conn)
```

```{r}
sql_case <- 
  "DELETE FROM @target_database_schema.@target_cohort_table where cohort_definition_id = @target_cohort_id;
INSERT INTO @target_database_schema.@target_cohort_table (cohort_definition_id, subject_id, cohort_start_date, cohort_end_date)
SELECT 
  @target_cohort_id AS cohort_definition_id,
  person.person_id AS person_id,
  import.COHORT_START_DATE AS start_date,
  import.COHORT_END_DATE AS end_date
FROM @target_database_schema.tmp_import_table AS import
LEFT JOIN @cdm_database_schema.person AS person
ON import.subject_id=person.person_id"


cohortDefinitionSet_2 <- tibble::tibble(
  atlasId = 100, 
  cohortId = 100, 
  cohortName = "From File", 
  sql = sql_case, 
  json = "{}", 
  logicDescription = "",
  generateStats = FALSE
)

```

```{r}

cohortsGenerated <- CohortGenerator::generateCohortSet(
  connectionDetails= database_settings$connectionDetails,
  cdmDatabaseSchema = database_settings$schemas$CDM,
  cohortDatabaseSchema = database_settings$schemas$scratch,
  cohortTableNames = cohortTableNames,
  cohortDefinitionSet = cohortDefinitionSet_2, 
  tempEmulationSchema = database_settings$schemas$scratch, 
  incremental = T, 
  incrementalFolder = tmp_folder)

```

```{r}
count <- CohortGenerator::getCohortCounts(
  connectionDetails = database_settings$connectionDetails,
  cohortDatabaseSchema = database_settings$schemas$scratch,
  cohortTable = cohortTableNames$cohortTable)
count
```

# Feature extraction

Perperson features

```{r}
covariateSettings <- FeatureExtraction::createDefaultCovariateSettings()

covariateData <- FeatureExtraction::getDbCovariateData(
  connectionDetails = database_settings$connectionDetails,
  cdmDatabaseSchema = database_settings$schemas$CDM,
  cohortDatabaseSchema = database_settings$schemas$scratch,
  cohortTable = cohortTableNames$cohortTable,
  cohortId = 19,
  rowIdField = "subject_id",
  covariateSettings = covariateSettings, 
  #
  oracleTempSchema = database_settings$schemas$scratch)

summary(covariateData)

```

```{r}
FeatureExtraction::saveCovariateData(covariateData,file.path(tmp_folder, "covariateData"))
```

```{r}
covariateData <- FeatureExtraction::loadCovariateData(file.path(tmp_folder, "covariateData"))
```


```{r}
covariateData$covariates
```


```{r}
tidyCovariates <- FeatureExtraction::tidyCovariateData(covariateData,
                                    minFraction = 0.001,
                                    normalize = TRUE,
                                    removeRedundancy = TRUE)
```

Agregate features

```{r}

covariateData_aggregated <- FeatureExtraction::aggregateCovariates(covariateData)

```

```{r}
result <- FeatureExtraction::createTable1(covariateData_aggregated)
print(result, row.names = FALSE, right = FALSE)
```



 Compare 2 cohorts 
 
 
```{r}
covariateSettings <- FeatureExtraction::createDefaultCovariateSettings()

covariateData_aggregated_2 <- FeatureExtraction::getDbCovariateData(
  connectionDetails = database_settings$connectionDetails,
  cdmDatabaseSchema = database_settings$schemas$CDM,
  cohortDatabaseSchema = database_settings$schemas$scratch,
  cohortTable = cohortTableNames$cohortTable,
  cohortId = 23,
  rowIdField = "subject_id",
  covariateSettings = covariateSettings, 
  #
  oracleTempSchema = database_settings$schemas$scratch, 
  aggregated = TRUE)

```

```{r}
std <- FeatureExtraction::computeStandardizedDifference(covariateData_aggregated, covariateData_aggregated_2)
```





# Cohort Diagnostics 



```{r}
CohortDiagnostics::executeDiagnostics(
  cohortDefinitionSet = bind_rows(
    cohortDefinitionSet
  ),
  exportFolder = file.path(tmp_folder, "cohortDiagnostics/export"),
  databaseId = "db1",
  cohortDatabaseSchema = database_settings$schemas$scratch,
  connectionDetails = database_settings$connectionDetails,
  cdmDatabaseSchema = database_settings$schemas$CDM,
  tempEmulationSchema = database_settings$schemas$scratch,
  cohortTable = "cg_example",
  vocabularyDatabaseSchema = database_settings$schemas$CDM,
  cohortIds = NULL,
  cdmVersion = 5,
  runInclusionStatistics = F,
  runIncludedSourceConcepts = F,
  runOrphanConcepts = F,
  runTimeSeries = F,
  runVisitContext = F,
  runBreakdownIndexEvents = F,
  runIncidenceRate = TRUE,
  runCohortRelationship = F,
  runTemporalCohortCharacterization = F, 
  minCellCount = 0
)
```

```{r}
CohortDiagnostics:::getIncidenceRate(
  connectionDetails = database_settings$connectionDetails,
  cohortDatabaseSchema = database_settings$schemas$scratch,
  cohortTable = "cg_example",
  cdmDatabaseSchema = database_settings$schemas$CDM,
  vocabularyDatabaseSchema = database_settings$schemas$CDM,
  cdmVersion = 5,
  tempEmulationSchema = database_settings$schemas$scratch,
  firstOccurrenceOnly = TRUE,
  washoutPeriod = 365,
  cohortId = 100
)
```

```{r}
data <- CohortDiagnostics::runCohortTimeSeriesDiagnostics(
  connectionDetails = database_settings$connectionDetails,
  tempEmulationSchema = database_settings$schemas$scratch,
  cdmDatabaseSchema = database_settings$schemas$CDM, 
  cohortDatabaseSchema = database_settings$schemas$scratch,
  cohortTable = "cg_example",
  runCohortTimeSeries = TRUE,
  runDataSourceTimeSeries = FALSE,
  timeSeriesMinDate = as.Date("1980-01-01"),
  timeSeriesMaxDate = as.Date(Sys.Date()),
  stratifyByGender = TRUE,
  stratifyByAgeGroup = TRUE,
  cohortIds = 19
)
```



```{r}
CohortDiagnostics::launchCohortExplorer(
  connectionDetails = database_settings$connectionDetails,
  cdmDatabaseSchema = database_settings$schemas$CDM,
  cohortDatabaseSchema = database_settings$schemas$scratch,
  cohortTable = "cg_example",
  cohortId = 19,
  sampleSize = 10,
  subjectIds = NULL
)
```


```{r}
cd <- DatabaseConnector::createConnectionDetails(
  dbms = "postgresql", 
  user = "ohdsi_admin_user", 
  password = "admin1", 
  server = "localhost/dummy_df6_1k_13",
  port = "5432", 
  pathToDriver = r"(C:\Users\javier\.r\jdbc_drivers\postgresql)"
)

DatabaseConnector::connect(cd)
```



